/*
 *   
 *   Copyright 2020 Florian Porsch <tederean@gmail.com>
 *   
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as published by
 *   the Free Software Foundation; either version 3 of the License, or
 *   (at your option) any later version.
 *   
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Lesser General Public License for more details.
 *   
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 *   MA 02110-1301 USA.
 *
 */
using System;

namespace Tederean.FastIOW
{

  /// <summary>
  /// Represents a pysical IOWarrior device.
  /// </summary>
  public interface IOWarrior
  {

    /// <summary>
    /// Returns the name of this device.
    /// </summary>
    string Name { get; }

    /// <summary>
    /// Returns IOWarrior model type of this device.
    /// </summary>
    IOWarriorType Type { get; }

    /// <summary>
    /// Returns the id of this device.
    /// </summary>
    int Id { get; }

    /// <summary>
    /// Returns unique serial number of this device.
    /// </summary>
    string SerialNumber { get; }

    /// <summary>
    /// Returns true if this device is connected, otherwise false.
    /// </summary>
    bool Connected { get; }

    /// <summary>
    /// Represents a pin state pulled to low potential by open drain circuit.
    /// </summary>
    bool LOW { get; }

    /// <summary>
    /// Represents a pin state pulled to high potential by pullup resistor.
    /// </summary>
    bool HIGH { get; }


    /// <summary>
    /// Event that gets triggered when a pin changes its state.
    /// </summary>
    event EventHandler<PinStateChangeEventArgs> PinStateChange;


    /// <summary>
    /// Set input output pin to given state.
    /// </summary>
    /// <exception cref="ArgumentException"/>
    /// <exception cref="InvalidOperationException"/>
    /// <exception cref="IOException"/>
    void DigitalWrite(int pin, bool state);

    /// <summary>
    /// Returns state of input output pin.
    /// </summary>
    /// <exception cref="ArgumentException"/>
    /// <exception cref="InvalidOperationException"/>
    bool DigitalRead(int pin);

    /// <summary>
    /// Returns a new report at given pipe size. All bytes set to be zero.
    /// </summary>
    /// <exception cref="ArgumentNullException"/>
    /// <exception cref="ArgumentException"/>
    byte[] NewReport(Pipe pipe);

    /// <summary>
    /// Write byte array report generated by NewReport()
    /// to IOWarrior device, using given pipe.
    /// Use this method only if you know what you are doing.
    /// </summary>
    /// <exception cref="ArgumentNullException"/>
    /// <exception cref="ArgumentException"/>
    /// <exception cref="InvalidOperationException"/>
    /// <exception cref="IOException"/>
    void WriteReport(byte[] report, Pipe pipe);

    /// <summary>
    /// Returns byte array report read from IOWarrior device using given pipe.
    /// Use this method only if you know what you are doing.
    /// </summary>
    /// <exception cref="ArgumentNullException"/>
    /// <exception cref="ArgumentException"/>
    /// <exception cref="InvalidOperationException"/>
    /// <exception cref="IOException"/>
    byte[] ReadReport(Pipe pipe);

    /// <summary>
    /// Read byte array report from IOWarrior device using given pipe.
    /// Returns true if report contains new data, otherwise false.
    /// Use this method only if you know what you are doing.
    /// </summary>
    /// <exception cref="ArgumentNullException"/>
    /// <exception cref="ArgumentException"/>
    /// <exception cref="InvalidOperationException"/>
    /// <exception cref="IOException"/>
    bool ReadReportNonBlocking(Pipe pipe, out byte[] report);
  }
}
